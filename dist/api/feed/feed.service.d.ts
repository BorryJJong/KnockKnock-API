/// <reference types="multer" />
import { Connection, QueryRunner } from 'typeorm';
import { CreateBlogPostDTO, GetListFeedMainReqDTO, GetListFeedMainResDTO, GetListFeedReqQueryDTO, GetListFeedResDTO, InsBlogCommentDTO, GetFeedViewReqDTO, GetFeedViewResDTO, GetListFeedCommentReqDTO, GetListFeedCommentResDTO, DelBlogCommentReqDTO, UpdateBlogPostDTO, DeleteFeedReqDTO, UpdateFeedReqDTO, CreateFeedDTOV2, CreateFeedResDTO } from './dto/feed.dto';
import { ImageService } from 'src/api/image/image.service';
import { BlogChallengesRepository } from './repository/blogChallenges.repository';
import { BlogImageRepository } from './repository/blogImage.repository';
import { BlogPromotionRepository } from './repository/blogPromotion.repository';
import { BlogCommentRepository } from './repository/blogComment.repository';
import { IBlogPostRepository } from './interface/blogPost.interface';
import { BlogPost } from '@entities/BlogPost';
import { BlogLikeRepository } from 'src/api/like/repository/like.repository';
import { UserRepository } from 'src/api/users/users.repository';
import { UserToBlogPostHideRepository } from 'src/api/feed/repository/UserToBlogPostHide.repository';
import { UserReportBlogPostRepository } from 'src/api/feed/repository/UserReportBlogPost.repository';
import { UsersService } from 'src/api/users/users.service';
import { IUserToBlockUserRepository } from 'src/api/users/interface/userToBlockUser.interface';
export declare class FeedService {
    private readonly imageService;
    private connection;
    private blogPostRepository;
    private blogChallengesRepository;
    private blogPromotionRepository;
    private blogImageRepository;
    private blogCommentRepository;
    private blogLikeRepository;
    private userRepository;
    private userToBlogPostHideRepository;
    private userReportBlogPostRepository;
    private userToBlockUserRepository;
    private userService;
    private readonly logger;
    private readonly s3Endpoint;
    constructor(imageService: ImageService, connection: Connection, blogPostRepository: IBlogPostRepository, blogChallengesRepository: BlogChallengesRepository, blogPromotionRepository: BlogPromotionRepository, blogImageRepository: BlogImageRepository, blogCommentRepository: BlogCommentRepository, blogLikeRepository: BlogLikeRepository, userRepository: UserRepository, userToBlogPostHideRepository: UserToBlogPostHideRepository, userReportBlogPostRepository: UserReportBlogPostRepository, userToBlockUserRepository: IUserToBlockUserRepository, userService: UsersService);
    create(files: Express.Multer.File[], createFeedDTO: CreateFeedDTOV2, userId: number): Promise<CreateFeedResDTO>;
    savePost(queryRunner: QueryRunner, createBlogPostDTO: CreateBlogPostDTO, userId: number): Promise<BlogPost>;
    saveChallenges(queryRunner: QueryRunner, postId: number, challenges: string): Promise<void>;
    savePromotion(queryRunner: QueryRunner, postId: number, promotions: string): Promise<void>;
    deletePostImage(queryRunner: QueryRunner, postId: number, fileUrls: string[]): Promise<void>;
    savePostImage(queryRunner: QueryRunner, postId: number, file: Express.Multer.File): Promise<void>;
    saveBlogComment(insBlogCommentDTO: InsBlogCommentDTO, userId: number): Promise<void>;
    getFeed({ id }: GetFeedViewReqDTO, userId?: number): Promise<GetFeedViewResDTO>;
    update(postId: number, updateFeedDTO: UpdateFeedReqDTO): Promise<void>;
    updatePost(queryRunner: QueryRunner, postId: number, updateBlogPostDTO: UpdateBlogPostDTO): Promise<any>;
    updateChallenges(queryRunner: QueryRunner, postId: number, challenges: string): Promise<void>;
    updatePromotion(queryRunner: QueryRunner, postId: number, promotions: string): Promise<void>;
    getFeedsByChallengesFilter(query: GetListFeedMainReqDTO, userId?: number): Promise<GetListFeedMainResDTO>;
    private getExcludeBlogPostIds;
    getListFeed(query: GetListFeedReqQueryDTO, userId?: number): Promise<GetListFeedResDTO>;
    private getFeedListTake;
    private getFeedListByUserLikes;
    private getFeedListByUserInfo;
    getListFeedComment({ id }: GetListFeedCommentReqDTO, userId: number): Promise<GetListFeedCommentResDTO[]>;
    private isFeedCommentWriter;
    deleteBlogComment({ id }: DelBlogCommentReqDTO): Promise<void>;
    delete({ id }: DeleteFeedReqDTO): Promise<void>;
}
